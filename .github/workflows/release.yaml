name: Semantic Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # make sure it only run on main
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
      id-token: write # to enable use of OIDC for npm provenance    
    outputs:
      new_release_version: ${{ steps.Release.outputs.new_release_version }}
      new_release_published: ${{ steps.Release.outputs.new_release_published }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        run: npm install -g semantic-release @semantic-release/git @semantic-release/changelog @semantic-release/exec
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Running semantic-release in dry-run mode..."
          NEW_RELEASE_VERSION=$(npx semantic-release --dry-run | grep "next release version" | awk '{print $NF}')
          echo "Detected version: $NEW_RELEASE_VERSION"
          echo "new_release_version=$NEW_RELEASE_VERSION" >> $GITHUB_OUTPUT
          if [ -n "$NEW_RELEASE_VERSION" ]; then
            echo "new_release_published=true" >> $GITHUB_OUTPUT
            npx semantic-release
          else
            echo "new_release_published=false" >> $GITHUB_OUTPUT
          fi
      - name: Debug Output
        run: |
          echo "New Release Version: ${{ steps.Release.outputs.new_release_version }}"
          echo "New Release Published: ${{ steps.Release.outputs.new_release_published }}"
  always_run:
   needs: release
   runs-on: ubuntu-latest
   if: always()
   steps:
     - name: Always Run Debug
       run: |
         echo "New Release Version: ${{ needs.release.outputs.new_release_version }}"
         echo "New Release Published: ${{ needs.release.outputs.new_release_published }}"
  build-docker:
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.new_release_published == 'true'
    permissions:
      contents: read  # Necessary to read repository contents
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Log in to DigitalOcean Container Registry
        run: echo "${{ secrets.DO_REGISTRY_CI_TOKEN }}" | docker login registry.digitalocean.com -u ${{ github.actor }} --password-stdin
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: registry.digitalocean.com/sc4013/sc4013-backend:${{ needs.release.outputs.new_release_version }} 
  check-docker-build:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Check Docker build
        run: docker build .
